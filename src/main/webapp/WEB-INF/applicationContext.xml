	<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	  http://www.springframework.org/schema/aop   
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
           
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
  	<property name="location">
    	<value>classpath:/supermarket.properties</value> 
  	</property>
	</bean>
    
    <context:component-scan base-package="com.borrow.supermarket.*"></context:component-scan>
    
    <context:annotation-config />
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${jdbc.url.fixed}" />
		<property name="username" value="${jdbc.username.fixed}" />
		<property name="password" value="${jdbc.password.fixed}" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<list>
				<value>mapper/*/*.xml</value>
			</list>
		</property>
		<property name="configLocation" value="classpath:/mybatis-config.xml" />
	</bean>

	<bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.borrow.supermarket.dao" />
    </bean>
    
    <!-- jedis -->
    
    <bean id="jedisPoolConfigUtil" class="com.borrow.supermarket.jedis.JedisPoolConfigUtil">
		<!-- Maximum active connections to Redis instance -->
		 <property name="maxActive" value="${redis.pool.maxActive}"/>  
		<!-- Number of connections to Redis that just sit there and do nothing -->
		<property name="maxIdle" value="${redis.pool.maxIdle}"/>
		<!-- Minimum number of idle connections to Redis - these can be seen as always open and ready to serve -->
		<property name="minIdle" value="${redis.pool.minIdle}"/>
		
		<!-- <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/> -->
		<property name="maxWait" value="${redis.pool.maxWaitMillis}"/>
		<!-- Tests whether connection is dead when connection retrieval method is called -->
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
		<!-- Tests whether connection is dead when returning a connection to the pool -->
		<property name="testOnReturn" value="${redis.pool.testOnReturn}"/>
	</bean>
	
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfigUtil"/>
		<constructor-arg index="1" value="${redis.host}"/>
		<constructor-arg index="2" value="${redis.port}"/>
        	<constructor-arg index="3" value="${redis.timeout}"/>
	</bean>
</beans>
